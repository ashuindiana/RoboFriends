{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoudary.js","constants.js","Containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","filteredRobots","filter","robot","toLowerCase","includes","searchField","onSearchChange","connect","searchRobots","requestRobots","isPending","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d26297fa.chunk.js","sourcesContent":["const Card = ({id, name, email}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={'https://robohash.org/'+id+'?size=200x200'} alt=\"robo\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Card;","import Card from './Card'\r\n\r\nconst CardList = ({robots})=> {\r\n\tconst cardArray = robots.map((user, i)=>{\r\n\t\treturn <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t});\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{cardArray}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","const SearchBox= ({searchChange})=> {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"Search Robots\" \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t\t \r\n\t);\r\n}\r\nexport default SearchBox;","const Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', border: '1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch (error, info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Something Went wrong!!</h1>\r\n\t\t}else{\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\nimport CardList from '../Components/CardList.js';\nimport SearchBox from '../Components/SearchBox';\nimport './App.css';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoudary';\nimport {connect } from 'react-redux';\nimport { setSearchField, requestRobots} from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: ()=> dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render(){\n    const filteredRobots= this.props.robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase())\n    })\n\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={this.props.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n  \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text \r\n});\r\n\r\nexport const requestRobots = ()=> (dispatch)=>{\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending:true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots:action.payload, isPending:false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {robots:action.payload, isPending:false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App.js';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {searchRobots, requestRobots} from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store} >\n  \t<App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}